# REPLbot config file

# Slack/Discord bot token used to authorize the bot. The token format is used by REPLbot to figure out
# which kind of token it is.
#
# For Slack:
#   REPLbot uses Slack's modern Socket Mode API. To create a Slack app and acquire the required tokens:
#     1. Create a new Slack app: https://api.slack.com/apps/new (choose "From scratch")
#     2. In "Socket Mode", enable Socket Mode and create an "App-Level Token" with "connections:write" scope
#     3. In "OAuth & Permissions", add bot token scopes: app_mentions:read, channels:history, channels:read,
#        chat:write, files:write, im:history, im:read, im:write
#     4. In "OAuth & Permissions", click "Install to Workspace"
#     5. Copy the "Bot User OAuth Token" starting with "xoxb-..."
#     6. In "Event Subscriptions", enable events and subscribe to: app_mention, message.channels,
#        message.im, member_joined_channel
#
# For Discord:
#   1. Create an app: https://discord.com/developers/applications
#   2. In the "Bot" section, click "Add Bot" and disable "Public Bot"
#   3. In the "OAuth2" section, click "Add Redirect" and type a URL (even https://google.com is fine),
#      select the scopes "bot" and "messages.read", and the permissions "public threads", "private thread",
#      "send messages", "manage messages", "manage threads". Click "Save changes".
#   4. Copy the OAuth2 URL and navigate to it in the browser and authorize the app.
#   5. In the "Bot" section, copy the token and paste it here
#
# Format:    long cryptic string
# Default:   None
# Required:  Yes
#
bot-token: MUST_BE_SET

# Slack App-Level token used for Socket Mode connections.
# Required for Slack connections. Must start with "xapp-".
# Created in "Socket Mode" section of your Slack app with "connections:write" scope.
#
# Format:    long cryptic string starting with xapp-
# Default:   None
# Required:  For Slack
#
app-token: ""

# Directory containing your REPL scripts. REPLbot ships with a bunch of default scripts. Be sure
# to check them out and add/remove scripts as you like.
#
# Security note:
#   Scripts are run in and controlled by a tmux(1) and can be executed from Slack/Discord by users, so it is
#   vital that you make sure you cannot do anything nasty from these scripts. Either properly restrict
#   them (limited shell), and/or put them in a Docker container.
#
# Format:    Existing directory
# Default:   /etc/replbot/script.d
# Required:  No
#
# script-dir: /etc/replbot/script.d

# Default control/terminal mode. This mode defines how new sessions are started and controlled by the user.
#
# - channel: Both terminal window and user control appear in the main channel
# - thread:  Both terminal window and user control appear in a thread
# - split:   The terminal window is displayed in the main channel, the user input from a thread
#
# Format:    channel|thread|split
# Default:   split
# Required:  No
#
# default-control-mode: split

# Default window mode. This defines whether white space and new lines are trimmed in the chat terminal window.
#
# - full: The terminal window is left unchanged
# - trim: White spaces are new lines are trimmed from the end
#
# Format:    full|trim
# Default:   full
# Required:  No
#
# default-window-mode: full

# Default auth mode. This defines who can send commands in a new session. In an active session, users can be
# added/removed using the !allow and !disallow commands.
#
# - only-me: In a new session, only the person who started the session can send commands
# - everyone: White spaces are new lines are trimmed from the end
#
# Format:    only-me|everyone
# Default:   everyone; for terminal sharing sessions: only-me
# Required:  No
#
# default-auth-mode: everyone

# Default terminal size. This defines how large the terminal should be when a new session is started. This
# can be overridden by the user and using the !resize command.
#
# Format:    tiny|small|medium|large
# Default:   small
# Required:  No
#
# default-size: small

# Record sessions by default. If turned on, a ZIP archive containing a recording of the session, including
# all output will be attached to the session exit message. This option defines the default behavior. It can
# be changed using the "record" or "norecord" settings.
#
# Format:    true or false
# Default:   false
# Required:  No
#
# default-record: false

# Upload recorded sessions using `asciinema upload`. If set, sessions that are recorded will also
# be uploaded. If you'd like to have control over what asciinema host sessions and with what user
# are uploaded to, you should make sure that you configure your asciinema client and properly log in
# using `asciinema auth`.
#
# If you have your own asciinema server set up, you may also configure that in the config file
# ~/.config/asciinema/config. If REPLbot runs as "replbot" user (installed via the .deb/.rpm),
# that'd be /var/lib/replbot/.config/asciinema/config, and you may install it like so:
#
#  $ su -s/bin/bash replbot
#  $ mkdir -p /var/lib/replbot/.config/asciinema
#  $ vi /var/lib/replbot/.config/asciinema/config
#      [api]
#      url=http://my-local.host.lan
#
# Format:    true or false
# Default:   false
# Required:  No
#
# upload-recording: false

# Hostname and port of the web server to support the web terminal feature via the !web command.
# The socket is bound to :port, but the hostname is used to provide the full URL.
#
# If no port is provided, port 80 is assumed.
#
# For this option to work, you must have 'ttyd' (https://github.com/tsl0922/ttyd) installed somewhere
# in your path. The easiest way to install it is like this:
#
#  $ wget https://github.com/tsl0922/ttyd/releases/download/1.6.3/ttyd.x86_64 \
#      && chmod +x ttyd.x86_64 \
#      && sudo mv ttyd.x86_64 /usr/local/bin/ttyd
#
# Format:    <hostname>[:<port>]
# Default:   empty
# Required:  No
#
# web-host:

# Start web terminal by default (only applicable if "web-host" is set). If turned on, a ttyd web terminal
# will be started by default for each session. This option defines the default behavior. It can be changed
# using the "web" or "noweb" settings.
#
# Format:    true or false
# Default:   false
# Required:  No
#
# default-web: false

# Timeout after which REPL sessions are terminated if there is no user input.
#
# Format:    <number>(hms), must be >1m
# Default:   10m
# Required:  No
#
# idle-timeout: 10m

# Defines the maximum number of active sessions by all users combined.
#
# Format:    <number>
# Default:   6
# Required:  No
#
# max-total-sessions: 6

# Defines the maximum number of active sessions by any individual user.
#
# Format:    <number>
# Default:   2
# Required:  No
#
# max-user-sessions: 2

# Cursor setting for the terminal. Can be "on" to always render the cursor, "off" to turn it off entirely,
# or a duration such as "1s" or "2s" to define the blink rate.
#
# Slack:
#   Please do note that Slack heavily rate limits messages (one message per second per channel), so
#   re-rendering the terminal for the cursor can have side effects.
# Discord:
#   Discord allows 50 requests per second, though in practice a blinking cursor leads to delays too.
#
# Format:    on, off or <number>s
# Default:   on
# Required:  No
#
# cursor: on

# To allow terminal sharing via "@replbot share", REPLbot must run an SSH server that clients can
# connect to. This section defines the host (hostname:port pair). The SSH server will be bound to the
# port in the "host" config.
#
# Format:   <hostname>:<port>
# Default:  (empty)
# Required: No
#
# share-host:

# The SSH host key file name ("key") used by above-mentioned SSH server.
#
# To generate a hostkey, you may run:
#   $ sudo ssh-keygen -q -N "" -f /etc/replbot/hostkey
#
# Format:   key: <filename>
# Default:  /etc/replbot/hostkey
# Required: No
#
# share-key-file: /etc/replbot/hostkey

# Path to the tmux binary. This is useful if tmux is installed in a non-standard location.
# REPLbot will auto-detect the tmux path if not specified.
#
# Format:   /path/to/tmux
# Default:  (auto-detected)
# Required: No
#
# tmux-path:
