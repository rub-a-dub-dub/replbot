name: security

on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  govulncheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run govulncheck
        run: govulncheck -format sarif ./... > govulncheck.sarif
      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: govulncheck.sarif

  gosec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      - name: Run gosec
        run: gosec -fmt sarif -out gosec.sarif ./...
      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif

  licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest
      - name: Check licenses
        run: go-licenses check ./...
      - name: Generate license report
        run: go-licenses report ./... > license-report.csv
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.csv

  container-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the entire security workflow if container scan fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build production image
        run: docker build -t replbot -f Dockerfile .
      - name: Build test image  
        run: docker build -t replbot-test -f Dockerfile.test .
      - name: Run Trivy vulnerability scanner (production image)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'replbot'
          format: 'sarif'
          output: 'trivy-prod.sarif'
      - name: Upload Trivy scan results to GitHub Security tab (production)
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-prod.sarif') != ''
        with:
          sarif_file: 'trivy-prod.sarif'
          category: 'trivy-container-prod'
      - name: Run Trivy vulnerability scanner (test image)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'replbot-test'
          format: 'sarif'
          output: 'trivy-test.sarif'
      - name: Upload Trivy scan results to GitHub Security tab (test)
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-test.sarif') != ''
        with:
          sarif_file: 'trivy-test.sarif'
          category: 'trivy-container-test'
